"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[18617],{15482:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=n(85893),o=n(11151);const i={description:"Author: @wingkwong | https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/",tags:["Array","String"]},s="1662 - Check If Two String Arrays are Equivalent (Easy)",a={id:"1600-1699/check-if-two-string-arrays-are-equivalent-easy",title:"1662 - Check If Two String Arrays are Equivalent (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/",source:"@site/solutions/1600-1699/1662-check-if-two-string-arrays-are-equivalent-easy.md",sourceDirName:"1600-1699",slug:"/1600-1699/check-if-two-string-arrays-are-equivalent-easy",permalink:"/solutions/1600-1699/check-if-two-string-arrays-are-equivalent-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1662-check-if-two-string-arrays-are-equivalent-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:1662,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/",tags:["Array","String"]},sidebar:"tutorialSidebar",previous:{title:"1657 - Determine If Two Strings Are Close (Medium)",permalink:"/solutions/1600-1699/define-if-two-strings-are-close-medium"},next:{title:"1664 - Ways to Make a Fair Array (Medium)",permalink:"/solutions/1600-1699/ways-to-make-a-fair-array-medium"}},c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}];function d(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{SolutionAuthor:n,TabItem:i,Tabs:s}=r;return n||u("SolutionAuthor",!0),i||u("TabItem",!0),s||u("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"1662---check-if-two-string-arrays-are-equivalent-easy",children:"1662 - Check If Two String Arrays are Equivalent (Easy)"}),"\n",(0,t.jsx)(r.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/",children:"https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/"})}),"\n",(0,t.jsx)(r.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(r.p,{children:["Given two string arrays ",(0,t.jsx)(r.code,{children:"word1"})," and ",(0,t.jsx)(r.code,{children:"word2"}),", return",(0,t.jsx)(r.code,{children:"true"}),(0,t.jsxs)(r.em,{children:["if the two arrays ",(0,t.jsx)(r.strong,{children:"represent"})," the same string, and"]}),(0,t.jsx)(r.code,{children:"false"}),(0,t.jsx)(r.em,{children:"otherwise."})]}),"\n",(0,t.jsxs)(r.p,{children:["A string is ",(0,t.jsx)(r.strong,{children:"represented"})," by an array if the array elements concatenated ",(0,t.jsx)(r.strong,{children:"in order"})," forms the string."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'Input: word1 = ["ab", "c"], word2 = ["a", "bc"]\nOutput: true\nExplanation:\nword1 represents string "ab" + "c" -> "abc"\nword2 represents string "a" + "bc" -> "abc"\nThe strings are the same, so return true.\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'Input: word1 = ["a", "cb"], word2 = ["ab", "c"]\nOutput: false\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]\nOutput: true\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"1 <= word1.length, word2.length <= 103"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"1 <= word1[i].length, word2[i].length <= 103"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"1 <= sum(word1[i].length), sum(word2[i].length) <= 103"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"word1[i]"})," and ",(0,t.jsx)(r.code,{children:"word2[i]"})," consist of lowercase letters."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"approach-1-two-pointers",children:"Approach 1: Two Pointers"}),"\n",(0,t.jsx)(s,{children:(0,t.jsxs)(i,{value:"cpp",label:"C++",children:[(0,t.jsx)(n,{name:"@wingkwong"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // intuition: \n    // we can combine all words together as `s1` and `s2` and then compare,\n    // based on the above idea, we can simulate it by using two pointers \n    // to check if a character in one word matches that in another word\n    // if we've processed one character, then we move to another character in the same word\n    // if we've processed one word, then we move to the next word\n    // if they are equivalent, both word pointers should be pointing at the end\n    bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {\n        int n = word1.size(), m = word2.size();\n        // pointer to the words in word1 and word2\n        int i = 0, j = 0;\n        // pointer to the character in `word1[i]` and `word2[j]`\n        int x = 0, y = 0;\n        while (i < n && j < m) {\n            // if both character doesn't match, then return false\n            // remember to increase the pointer x and y \n            // otherwise, it will cause TLE\n            if (word1[i][x++] != word2[j][y++]) return false;\n            // reach the end of the current word\n            // move to another word\n            // reset the pointer to 0 for the new word\n            if (x == word1[i].size()) i += 1, x = 0;\n            if (y == word2[j].size()) j += 1, y = 0;\n        }\n        // if they are equivalent, word pointers would be at position n and m \n        return i == n && j == m;\n    }\n};\n"})})]})})]})}function h(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function u(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(e,r,n)=>{n.d(r,{Z:()=>a,a:()=>s});var t=n(67294);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);