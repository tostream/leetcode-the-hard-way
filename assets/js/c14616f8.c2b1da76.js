"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[77612],{68534:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=r(85893),s=r(11151);const o={description:"Author: @wingkwong | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},a="1365 - How Many Numbers Are Smaller Than the Current Number (Easy)",l={id:"1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",title:"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/",source:"@site/solutions/1300-1399/1365-how-many-numbers-are-smaller-than-the-current-number-easy.md",sourceDirName:"1300-1399",slug:"/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",permalink:"/solutions/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1365-how-many-numbers-are-smaller-than-the-current-number-easy.md",tags:[],version:"current",sidebarPosition:1365,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},sidebar:"tutorialSidebar",previous:{title:"1359 - Count All Valid Pickup and Delivery Options (Hard)",permalink:"/solutions/1300-1399/count-all-valid-pickup-and-delivery-options-hard"},next:{title:"1371 - Find the Longest Substring Containing Vowels in Even Counts (Medium)",permalink:"/solutions/1300-1399/find-the-longest-substring-containing-vowels-in-even-counts-medium"}},i={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Sorting",id:"approach-2-sorting",level:2},{value:"Approach 3: Sorting + Lower Bound",id:"approach-3-sorting--lower-bound",level:2}];function m(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...n.components},{SolutionAuthor:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"1365---how-many-numbers-are-smaller-than-the-current-number-easy",children:"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)"}),"\n",(0,t.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/",children:"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"})}),"\n",(0,t.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(e.p,{children:["Given the array ",(0,t.jsx)(e.code,{children:"nums"}),", for each ",(0,t.jsx)(e.code,{children:"nums[i]"})," find out how many numbers in the array are smaller than it. That is, for each ",(0,t.jsx)(e.code,{children:"nums[i]"})," you have to count the number of valid ",(0,t.jsx)(e.code,{children:"j's"})," such that ",(0,t.jsx)(e.code,{children:"j != i"})," ",(0,t.jsx)(e.strong,{children:"and"})," ",(0,t.jsx)(e.code,{children:"nums[j] < nums[i]"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"Return the answer in an array. "}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"2 <= nums.length <= 500"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"0 <= nums[i] <= 100"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"approach-1-brute-force",children:"Approach 1: Brute Force"}),"\n",(0,t.jsx)(r,{name:"@wingkwong"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        int n = (int) nums.size();\n        vector<int> ans;\n        // iterate each element\n        for(int i = 0; i < n; i++){\n            // init a var called smaller\n            int smaller = 0;\n            // iterate each element\n            for(int j = 0; j < n; j++){\n                // if they are equal, skip it\n                if(i == j) continue;\n                // if nums[j] is smaller, increase the counter\n                if(nums[j] < nums[i]) smaller++;\n            }\n            // push the result to ans\n            ans.push_back(smaller);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"approach-2-sorting",children:"Approach 2: Sorting"}),"\n",(0,t.jsx)(r,{name:"@wingkwong"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> sorted_nums { nums }, ans;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        // nums: 8 1 2 2 3\n        // sorted_nums: 1 2 2 3 8\n        \n        // iterate each element in nums\n        // since we need the original order in ans\n        for (auto& x : nums) {\n            // init a var called smaller\n            int smaller = 0;\n            // walk thru sorted_nums\n            for (auto& y : sorted_nums) {\n                // if they are not equal, it means y is smaller than x\n                if (x != y) {\n                    smaller += 1;\n                } else {\n                    // otherwise, we got all elements smaller than x\n                    // so break it here\n                    break;\n                }\n            }\n            // push the result to ans\n            ans.push_back(smaller);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"approach-3-sorting--lower-bound",children:"Approach 3: Sorting + Lower Bound"}),"\n",(0,t.jsx)(r,{name:"@wingkwong"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:'class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> sorted_nums { nums }, ans;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        // nums: 8 1 2 2 3\n        // sorted_nums: 1 2 2 3 8\n        for (auto& x : nums) {\n            // we can use lower_bound to calculate the smaller \n            // lower_bound: returns an iterator pointing to the first element in the range [first,last) \n            // which does not compare less than val\n            // since it is a iterator, we need to add "- sorted_nums.begin()" to get the number of elements.\n            ans.push_back(\n                lower_bound(sorted_nums.begin(), sorted_nums.end(), x) \n                            - sorted_nums.begin()\n            );\n        }\n        return ans;\n    }\n};\n'})})]})}function c(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},11151:(n,e,r)=>{r.d(e,{Z:()=>l,a:()=>a});var t=r(67294);const s={},o=t.createContext(s);function a(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);