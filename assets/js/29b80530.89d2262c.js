"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[96401],{18386:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(85893),o=t(11151);const r={description:"Author: @wingkwong | https://leetcode.com/problems/optimal-partition-of-string/"},s="2405 - Optimal Partition of String (Medium)",a={id:"2400-2499/optimal-partition-of-string-medium",title:"2405 - Optimal Partition of String (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/optimal-partition-of-string/",source:"@site/solutions/2400-2499/2405-optimal-partition-of-string-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/optimal-partition-of-string-medium",permalink:"/solutions/2400-2499/optimal-partition-of-string-medium",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2405-optimal-partition-of-string-medium.md",tags:[],version:"current",sidebarPosition:2405,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/optimal-partition-of-string/"},sidebar:"tutorialSidebar",previous:{title:"2404 - Most Frequent Even Element (Easy)",permalink:"/solutions/2400-2499/most-frequent-even-element-easy"},next:{title:"2406 - Divide Intervals Into Minimum Number of Groups (Medium)",permalink:"/solutions/2400-2499/divide-intervals-into-minimum-number-of-groups-medium"}},c={},l=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}];function u(n){const e={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components},{SolutionAuthor:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"2405---optimal-partition-of-string-medium",children:"2405 - Optimal Partition of String (Medium)"}),"\n",(0,i.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(e.p,{children:["Given a string ",(0,i.jsx)(e.code,{children:"s"}),", partition the string into one or more ",(0,i.jsx)(e.strong,{children:"substrings"})," such that the characters in each substring are ",(0,i.jsx)(e.strong,{children:"unique"}),". That is, no letter appears in a single substring more than ",(0,i.jsx)(e.strong,{children:"once"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["Return ",(0,i.jsxs)(e.em,{children:["the ",(0,i.jsx)(e.strong,{children:"minimum"})," number of substrings in such a partition."]})]}),"\n",(0,i.jsx)(e.p,{children:"Note that each character should belong to exactly one substring in a partition."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Input: s = "abacaba"\nOutput: 4\nExplanation:\nTwo possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").\nIt can be shown that 4 is the minimum number of substrings needed.\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'Input: s = "ssssss"\nOutput: 6\nExplanation:\nThe only valid partition is ("s","s","s","s","s","s").\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"1 <= s.length <= 105"})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"s"})," consists of only English lowercase letters."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"approach-1-greedy",children:"Approach 1: Greedy"}),"\n",(0,i.jsx)(t,{name:"@wingkwong"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // the idea is to keep each partition as long as possible \n    // so that we could have the minimum number of substrings\n    int partitionString(string s) {\n        // the minimum number of substring is at least 1\n        // e.g. \"a\"\n        int ans = 1;\n        // cnt is used to count the frequency of each character\n        vector<int> cnt(26);\n        // for each character\n        for (auto& c : s) {\n            // we check if it exists before\n            // if so, then we should create a new partition\n            // because no letter appears in a single substring more than once\n            if (cnt[c - 'a']) {\n                // reset the counter\n                cnt = vector<int>(26);\n                // create a new partition\n                ans++;\n            }\n            // increase the frequency of the current character by 1\n            cnt[c - 'a']++;\n        } \n        return ans;\n    }\n};\n"})})]})}function p(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>s});var i=t(67294);const o={},r=i.createContext(o);function s(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);