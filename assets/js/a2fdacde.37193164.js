"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[68155],{76697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(85893),s=t(11151);const r={description:"Author: @wingkwong | https://leetcode.com/problems/ransom-note/",tags:["Hash Table","String","Counting"]},a="0383 - Ransom Note (Easy)",i={id:"0300-0399/ransom-note-easy",title:"0383 - Ransom Note (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/ransom-note/",source:"@site/solutions/0300-0399/0383-ransom-note-easy.md",sourceDirName:"0300-0399",slug:"/0300-0399/ransom-note-easy",permalink:"/solutions/0300-0399/ransom-note-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0383-ransom-note-easy.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"String",permalink:"/solutions/tags/string"},{label:"Counting",permalink:"/solutions/tags/counting"}],version:"current",sidebarPosition:383,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/ransom-note/",tags:["Hash Table","String","Counting"]},sidebar:"tutorialSidebar",previous:{title:"0377 - Combination Sum IV (Medium)",permalink:"/solutions/0300-0399/combination-sum-iv-medium"},next:{title:"0387 - First Unique Character in a String (Easy)",permalink:"/solutions/0300-0399/first-unique-character-in-a-string-easy"}},c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting",id:"approach-1-counting",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"0383---ransom-note-easy",children:"0383 - Ransom Note (Easy)"}),"\n",(0,o.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/ransom-note/",children:"https://leetcode.com/problems/ransom-note/"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(n.p,{children:["Given two strings ",(0,o.jsx)(n.code,{children:"ransomNote"})," and ",(0,o.jsx)(n.code,{children:"magazine"}),", return ",(0,o.jsx)(n.code,{children:"true"}),(0,o.jsx)(n.em,{children:"if"}),(0,o.jsx)(n.code,{children:"ransomNote"}),(0,o.jsx)(n.em,{children:"can be constructed by using the letters from"}),(0,o.jsx)(n.code,{children:"magazine"}),(0,o.jsx)(n.em,{children:"and"}),(0,o.jsx)(n.code,{children:"false"}),(0,o.jsx)(n.em,{children:"otherwise"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Each letter in ",(0,o.jsx)(n.code,{children:"magazine"})," can only be used once in ",(0,o.jsx)(n.code,{children:"ransomNote"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: ransomNote = "a", magazine = "b"\nOutput: false\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: ransomNote = "aa", magazine = "ab"\nOutput: false\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: ransomNote = "aa", magazine = "aab"\nOutput: true\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"1 <= ransomNote.length, magazine.length <= 10^5"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ransomNote"})," and ",(0,o.jsx)(n.code,{children:"magazine"})," consist of lowercase English letters."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"approach-1-counting",children:"Approach 1: Counting"}),"\n",(0,o.jsx)(t,{name:"@wingkwong"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n\t    // you can also use unordered_map<int, int> m; here\n\t\t// since we're just dealing with lowercase English letters, \n        // we can just use an array of length 26 to store the frequency of them\n        int m[26] = {0};\n        // count each character\n        for(char c : magazine) m[c - 'a']++;\n        // check if it can be found in m and substract by 1 \n        for(char c : ransomNote) {\n\t\t\t// if it is less than 0, it means it cannot be constructed from magazine\n            if(--m[c - 'a'] < 0) return false;\n        }\n        return true;\n    }\n};\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var o=t(67294);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);