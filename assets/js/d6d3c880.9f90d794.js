"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[85687],{72467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=n(85893),r=n(11151);const o={description:"Author: @wingkwong | https://leetcode.com/problems/sort-the-matrix-diagonally/",tags:["Array","Sorting","Matrix"]},a="1329 - Sort the Matrix Diagonally (Medium)",l={id:"1300-1399/sort-the-matrix-diagonally-medium",title:"1329 - Sort the Matrix Diagonally (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/sort-the-matrix-diagonally/",source:"@site/solutions/1300-1399/1329-sort-the-matrix-diagonally-medium.md",sourceDirName:"1300-1399",slug:"/1300-1399/sort-the-matrix-diagonally-medium",permalink:"/solutions/1300-1399/sort-the-matrix-diagonally-medium",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1329-sort-the-matrix-diagonally-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Sorting",permalink:"/solutions/tags/sorting"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:1329,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sort-the-matrix-diagonally/",tags:["Array","Sorting","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"1328 - Break a Palindrome (Medium)",permalink:"/solutions/1300-1399/break-a-palindrome-medium"},next:{title:"1331 - Rank Transform of an Array (Easy)",permalink:"/solutions/1300-1399/rank-transform-of-an-array-easy"}},s={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{SolutionAuthor:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"1329---sort-the-matrix-diagonally-medium",children:"1329 - Sort the Matrix Diagonally (Medium)"}),"\n",(0,i.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.strong,{children:"matrix diagonal"})," is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the ",(0,i.jsx)(t.strong,{children:"matrix diagonal"})," starting from ",(0,i.jsx)(t.code,{children:"mat[2][0]"}),", where ",(0,i.jsx)(t.code,{children:"mat"})," is a ",(0,i.jsx)(t.code,{children:"6 x 3"})," matrix, includes cells ",(0,i.jsx)(t.code,{children:"mat[2][0]"}),", ",(0,i.jsx)(t.code,{children:"mat[3][1]"}),", and ",(0,i.jsx)(t.code,{children:"mat[4][2]"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Given an ",(0,i.jsx)(t.code,{children:"m x n"})," matrix ",(0,i.jsx)(t.code,{children:"mat"})," of integers, sort each ",(0,i.jsx)(t.strong,{children:"matrix diagonal"})," in ascending order and return ",(0,i.jsx)(t.em,{children:"the resulting matrix"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"m == mat.length"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"n == mat[i].length"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"1 <= m, n <= 100"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"1 <= mat[i][j] <= 100"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"approach-1-priority-queue",children:"Approach 1: Priority Queue"}),"\n",(0,i.jsx)(n,{name:"@wingkwong"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {\n        int n = mat.size(), m = mat[0].size();\n        // observation:\n        // for each cell mat[i][j] in the same diagonal,\n        // they will have the same value i - j\n        \n        // if the diagonal line is pointing to upper right direction, \n        // then they will have the same value i + j (see https://leetcode.com/problems/diagonal-traverse/)\n        \n        // the idea is to use priority queue for each diagonal\n        // as priority queue could sort it internally when a value is pushed / popped\n        // we use greater<int> as we want the smallest go first\n        map<int, priority_queue<int, vector<int>, greater<int>>> diag;\n        // iterate each row\n        for (int i = 0; i < n; i++) {\n            // iterate each col\n            for (int j = 0; j < m; j++) {\n                // for each mat[i][j] \n                // add it to corresponding priority queue\n                diag[i - j].push(mat[i][j]);\n            }\n        }\n        // iterate each row\n        for (int i = 0; i < n; i++) {\n            // iterate each col\n            for (int j = 0; j < m; j++) {\n                // diag[i - j].top() would return the smallest number in the current queue\n                // we can just perform in-place replacement here\n                mat[i][j] = diag[i - j].top();\n                // since we don't need this value anymore, pop it out\n                // so that next cell would get the smallest value\n                diag[i - j].pop();\n            }\n        }\n        return mat;\n    }\n};\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>a});var i=n(67294);const r={},o=i.createContext(r);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);