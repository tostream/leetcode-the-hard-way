"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[40369],{92498:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var t=o(85893),i=o(11151);const s={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/"},r="2110 - Number of Smooth Descent Periods of a Stock (Medium)",c={id:"2100-2199/number-of-smooth-descent-periods-of-a-stock-medium",title:"2110 - Number of Smooth Descent Periods of a Stock (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/",source:"@site/solutions/2100-2199/2110-number-of-smooth-descent-periods-of-a-stock-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/number-of-smooth-descent-periods-of-a-stock-medium",permalink:"/solutions/2100-2199/number-of-smooth-descent-periods-of-a-stock-medium",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2110-number-of-smooth-descent-periods-of-a-stock-medium.md",tags:[],version:"current",sidebarPosition:2110,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/"},sidebar:"tutorialSidebar",previous:{title:"2109 - Adding Spaces to a String (Medium)",permalink:"/solutions/2100-2199/adding-spaces-to-a-string-medium"},next:{title:"2111 - Minimum Operations to Make the Array K-Increasing (Hard)",permalink:"/solutions/2100-2199/minimum-operations-to-make-the-array-k-increasing-hard"}},d={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2},{value:"Approach 2: Math",id:"approach-2-math",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{SolutionAuthor:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"2110---number-of-smooth-descent-periods-of-a-stock-medium",children:"2110 - Number of Smooth Descent Periods of a Stock (Medium)"}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/",children:"https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["You are given an integer array ",(0,t.jsx)(n.code,{children:"prices"})," representing the daily price history of a stock, where ",(0,t.jsx)(n.code,{children:"prices[i]"})," is the stock price on the ",(0,t.jsx)(n.code,{children:"ith"})," day."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"smooth descent period"})," of a stock consists of ",(0,t.jsx)(n.strong,{children:"one or more contiguous"})," days such that the price on each day is ",(0,t.jsx)(n.strong,{children:"lower"})," than the price on the ",(0,t.jsx)(n.strong,{children:"preceding day"})," by ",(0,t.jsx)(n.strong,{children:"exactly"})," ",(0,t.jsx)(n.code,{children:"1"}),". The first day of the period is exempted from this rule."]}),"\n",(0,t.jsxs)(n.p,{children:["Return ",(0,t.jsxs)(n.em,{children:["the number of ",(0,t.jsx)(n.strong,{children:"smooth descent periods"})]}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: prices = [3,2,1,4]\nOutput: 7\nExplanation: There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: prices = [8,6,7,7]\nOutput: 4\nExplanation: There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 \u2260 1.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: prices = [1]\nOutput: 1\nExplanation: There is 1 smooth descent period: [1]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= prices.length <= 10^5"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= prices[i] <= 10^5"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,t.jsxs)(n.p,{children:["Let ",(0,t.jsx)(n.code,{children:"dp[i]"})," be the number of smooth descent periods ended at day ",(0,t.jsx)(n.code,{children:"i"}),". First we can initialise ",(0,t.jsx)(n.code,{children:"dp[i] = 1"})," for each ",(0,t.jsx)(n.code,{children:"i"}),". This is true because the minimum smooth descent period is 1 which is itself. Then we can iterate ",(0,t.jsx)(n.code,{children:"prices"})," and check if the difference between previous price and current price is exactly 1 or not. If so, we can contribute ",(0,t.jsx)(n.code,{children:"dp[i - 1]"})," to ",(0,t.jsx)(n.code,{children:"dp[i]"}),"."]}),"\n",(0,t.jsx)(o,{name:"@wingkwong"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    long long getDescentPeriods(vector<int>& prices) {\n        int n = prices.size();\n        long long ans = 0;\n        vector<int> dp(n, 1);\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && prices[i - 1] - prices[i] == 1) {\n                dp[i] += dp[i - 1];\n            }\n            ans += dp[i];\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"approach-2-math",children:"Approach 2: Math"}),"\n",(0,t.jsxs)(n.p,{children:["For a non-increasing contiguous segement with length ",(0,t.jsx)(n.code,{children:"l"}),", it contributes ",(0,t.jsx)(n.code,{children:"1 + 2 + 3 + ... + l = (l + 1) * l / 2"})," subarrays."]}),"\n",(0,t.jsx)(o,{name:"@wingkwong"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    long long getDescentPeriods(vector<int>& prices) {\n        int n = prices.size();\n        long long ans = 0, i = 0;\n        while (i < n) {\n            long long l = 1;\n            i++;\n            while (i < n && prices[i - 1] - prices[i] == 1) i++, l++;\n            ans += (l + 1) * l / 2;\n        }\n        return ans;\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>r});var t=o(67294);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);