"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29327],{92953:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var r=t(85893),o=t(11151);const i={description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-pruning/",tags:["Tree","Depth-First Search","Binary Tree"]},s="0814 - Binary Tree Pruning (Medium)",l={id:"0800-0899/binary-tree-pruning-medium",title:"0814 - Binary Tree Pruning (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-pruning/",source:"@site/solutions/0800-0899/0814-binary-tree-pruning-medium.md",sourceDirName:"0800-0899",slug:"/0800-0899/binary-tree-pruning-medium",permalink:"/solutions/0800-0899/binary-tree-pruning-medium",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0814-binary-tree-pruning-medium.md",tags:[{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/solutions/tags/binary-tree"}],version:"current",sidebarPosition:814,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-pruning/",tags:["Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0813 - Largest Sum of Averages (Medium)",permalink:"/solutions/0800-0899/largest-sum-of-averages-medium"},next:{title:"0829 - Consecutive Numbers Sum (Hard)",permalink:"/solutions/0800-0899/consecutive-numbers-sum-hard"}},a={},h=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"0814---binary-tree-pruning-medium",children:"0814 - Binary Tree Pruning (Medium)"}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Given the ",(0,r.jsx)(n.code,{children:"root"})," of a binary tree, return ",(0,r.jsx)(n.em,{children:"the same tree where every subtree (of the given tree) not containing a"}),(0,r.jsx)(n.code,{children:"1"}),(0,r.jsx)(n.em,{children:"has been removed"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A subtree of a node ",(0,r.jsx)(n.code,{children:"node"})," is ",(0,r.jsx)(n.code,{children:"node"})," plus every node that is a descendant of ",(0,r.jsx)(n.code,{children:"node"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Input: root = [1,null,0,0,1]\nOutput: [1,null,0,null,1]\nExplanation: \nOnly the red nodes satisfy the property "every subtree not containing a 1".\nThe diagram on the right represents the answer.\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [1,0,1,0,0,0,1]\nOutput: [1,null,1,null,1]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: root = [1,1,0,1,1,0,1,0]\nOutput: [1,1,0,1,1,null,1]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The number of nodes in the tree is in the range ",(0,r.jsx)(n.code,{children:"[1, 200]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Node.val"})," is either ",(0,r.jsx)(n.code,{children:"0"})," or ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-dfs",children:"Approach 1: DFS"}),"\n",(0,r.jsx)(t,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Time Complexity: O(N) where N is the number of the nodes in the tree\n// Space Complexity: O(H) where H is the height of the tree. \n// In worse case, H can be N when it is a left skewed binary tree / right skewed binary tree\nclass Solution {\npublic:\n    // the idea is to use DFS to traverse the tree\n    // if the current subtree satifies one of the following conditions\n    // 1. root value is 1\n    // 2. left sub tree contains 1 \n    // 3. right sub tree contains 1\n    // then we return `root`\n    // otherwise, we return nullptr\n    TreeNode* pruneTree(TreeNode* root) {\n        // if root is nullptr, then return nullptr\n        if (!root) return nullptr;\n        // DFS on left sub tree\n        root->left = pruneTree(root->left);\n        // DFS on right sub tree\n        root->right = pruneTree(root->right);\n        // !root->left means the left sub tree doesn't contain 1\n        // !root->right means the right sub tree doesn't contain 1\n        // !root->val means the current node value is 0\n        // for this case, return nullptr\n        // else we can keep the node\n        return (!root->left && !root->right && !root->val) ? nullptr : root;\n    }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"In case you want to free the deleted root to avoid memory leak. You can change the last line to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"if (!root->left && !root->right && !root->val) {\n    // delete will delete the memory of the pointer of root\n\tdelete root;\n\treturn nullptr;\n} else {\n\treturn root;\n}\n"})}),"\n",(0,r.jsx)(t,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# Time Complexity: O(N) where N is the number of the nodes in the tree\n# Space Complexity: O(H) where H is the height of the tree. \n# In worse case, H can be N when it is a left skewed binary tree / right skewed binary tree\nclass Solution:\n    # the idea is to use DFS to traverse the tree\n    # if the current subtree satisfies one of the following conditions\n    # 1. root value is 1\n    # 2. left sub tree contains 1 \n    # 3. right sub tree contains 1\n    # then we return `root`\n    # otherwise, we return None\n    def pruneTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        # if root is None, then return None\n        if root is None: return None\n        # DFS on left sub tree\n        root.left = self.pruneTree(root.left)\n        # DFS on right sub tree\n        root.right = self.pruneTree(root.right)\n        # !root->left means the left sub tree doesn't contain 1\n        # !root->right means the right sub tree doesn't contain 1\n        # !root->val means the current node value is 0\n        # for this case, return None\n        # else we can keep the node\n        if root.left is None and root.right is None and root.val == 0: return None\n        return root\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var r=t(67294);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);