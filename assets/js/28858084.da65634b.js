"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[66766],{81978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(85893),r=n(11151);const i={title:"Sparse Table",description:"Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries.",hide_table_of_contents:!1,keywords:["leetcode","template","sparse table"]},s=void 0,o={id:"sparse-table",title:"Sparse Table",description:"Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries.",source:"@site/templates/sparse-table.md",sourceDirName:".",slug:"/sparse-table",permalink:"/templates/sparse-table",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/sparse-table.md",tags:[],version:"current",frontMatter:{title:"Sparse Table",description:"Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries.",hide_table_of_contents:!1,keywords:["leetcode","template","sparse table"]},sidebar:"tutorialSidebar",previous:{title:"Segment Tree",permalink:"/templates/segment-tree"},next:{title:"Two Pointers",permalink:"/templates/two-pointers"}},c={},l=[];function p(e){const t={code:"code",p:"p",pre:"pre",...(0,r.a)(),...e.components},{TabItem:n,Tabs:i}=t;return n||m("TabItem",!0),i||m("Tabs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i,{children:(0,a.jsx)(n,{value:"cpp",label:"C++",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"template<typename it, typename bin_op>\nstruct sparse_table {\n    using T = typename remove_reference<decltype(*declval<it>())>::type;\n    vector<vector<T>> t; bin_op f;\n\n    sparse_table(it first, it last, bin_op op) : t(1), f(op) {\n        int n = distance(first, last);\n        t.assign(32 - __builtin_clz(n), vector<T>(n));\n        t[0].assign(first, last);\n        for (int i = 1; i < t.size(); i++)\n            for (int j = 0; j < n - (1 << i) + 1; j++)\n                t[i][j] = f(t[i - 1][j], t[i - 1][j + (1 << (i - 1))]);\n    }\n\n    // returns f(a[l .. r]) in O(1) time\n    T query(int l, int r) {\n        int h = floor(log2(r - l + 1));\n        return f(t[h][l], t[h][r - (1 << h) + 1]);\n    }\n};\n"})})})}),"\n",(0,a.jsx)(t.p,{children:"Usage: Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries."}),"\n",(0,a.jsx)(i,{children:(0,a.jsx)(n,{value:"cpp",label:"C++",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:'void main() {\n\tsparse_table g(a.begin(), a.end(), [](int x, int y){\n\t\treturn gcd(x, y);\n\t});\n\tcout << g.query(j, i) << "\\n";\n}\n'})})})})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}function m(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>s});var a=n(67294);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);