"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78705],{26642:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=s(85893),t=s(11151);const i={description:"Author: @wingkwong | https://leetcode.com/problems/parallel-courses-ii",tags:["Dynamic Programming","Bit Masking"]},o="1494 - Parallel Courses II (Hard)",a={id:"1400-1499/parallel-courses-ii-hard",title:"1494 - Parallel Courses II (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/parallel-courses-ii",source:"@site/solutions/1400-1499/1494-parallel-courses-ii-hard.md",sourceDirName:"1400-1499",slug:"/1400-1499/parallel-courses-ii-hard",permalink:"/solutions/1400-1499/parallel-courses-ii-hard",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1400-1499/1494-parallel-courses-ii-hard.md",tags:[{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Bit Masking",permalink:"/solutions/tags/bit-masking"}],version:"current",sidebarPosition:1494,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/parallel-courses-ii",tags:["Dynamic Programming","Bit Masking"]},sidebar:"tutorialSidebar",previous:{title:"1491 - Average Salary Excluding the Minimum and Maximum Salary (Easy)",permalink:"/solutions/1400-1499/average-salary-excluding-the-minimum-and-maximum-salary-easy"},next:{title:"1496 - Path Crossing (Easy)",permalink:"/solutions/1400-1499/path-crossing-easy"}},c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP Bit Masking",id:"approach-1-dp-bit-masking",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{SolutionAuthor:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"1494---parallel-courses-ii-hard",children:"1494 - Parallel Courses II (Hard)"}),"\n",(0,r.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/parallel-courses-ii",children:"https://leetcode.com/problems/parallel-courses-ii"})}),"\n",(0,r.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You are given an integer ",(0,r.jsx)(n.code,{children:"n"}),", which indicates that there are ",(0,r.jsx)(n.code,{children:"n"})," courses labeled from ",(0,r.jsx)(n.code,{children:"1"})," to ",(0,r.jsx)(n.code,{children:"n"}),". You are also given an array ",(0,r.jsx)(n.code,{children:"relations"})," where ",(0,r.jsx)(n.code,{children:"relations[i] = [prevCoursei, nextCoursei]"}),", representing a prerequisite relationship between course ",(0,r.jsx)(n.code,{children:"prevCoursei"})," and course ",(0,r.jsx)(n.code,{children:"nextCoursei"}),": course ",(0,r.jsx)(n.code,{children:"prevCoursei"})," has to be taken before course ",(0,r.jsx)(n.code,{children:"nextCoursei"}),". Also, you are given the integer ",(0,r.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In one semester, you can take ",(0,r.jsx)(n.strong,{children:"at most"})," ",(0,r.jsx)(n.code,{children:"k"})," courses as long as you have taken all the prerequisites in the ",(0,r.jsx)(n.strong,{children:"previous"})," semesters for the courses you are taking."]}),"\n",(0,r.jsxs)(n.p,{children:["Return ",(0,r.jsxs)(n.em,{children:["the ",(0,r.jsx)(n.strong,{children:"minimum"})," number of semesters needed to take all courses"]}),". The testcases will be generated such that it is possible to take every course."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png",alt:""})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)("code",{children:["Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2\n",(0,r.jsx)("strong",{children:"Output:\n"})," 3\n",(0,r.jsx)("strong",{children:"Explanation:\n"})," The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png",alt:""})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)("code",{children:["Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2\n",(0,r.jsx)("strong",{children:"Output:\n"})," 4\n",(0,r.jsx)("strong",{children:"Explanation:\n"})," The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3 only since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)("pre",{children:(0,r.jsxs)("code",{children:["Input: n = 11, dependencies = [], k = 2\n",(0,r.jsx)("strong",{children:"Output:\n"})," 6"]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= n <= 15"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= k <= n"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"0 <= relations.length <= n * (n-1) / 2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"relations[i].length == 2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"1 <= prevCoursei, nextCoursei <= n"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"prevCoursei != nextCoursei"})}),"\n",(0,r.jsxs)(n.li,{children:["All the pairs ",(0,r.jsx)(n.code,{children:"[prevCoursei, nextCoursei]"})," are ",(0,r.jsx)(n.strong,{children:"unique"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"The given graph is a directed acyclic graph."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"approach-1-dp-bit-masking",children:"Approach 1: DP Bit Masking"}),"\n",(0,r.jsx)(s,{name:"@wingkwong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int minNumberOfSemesters(int n, vector<vector<int>>& dependencies, int k) {\n        // dp[i] : the minimum number of semesters needed to take the courses with the bit set in i\n        // the worst case is that in each semester we can only take one course, hence initialise with `n`\n        // at the end, the answer would be dp[(1 << n) - 1], i.e. all bits set\n        vector<int> dp(1 << n, n);\n        // if the i-th bit is set in pre[j], \n        // that means we need to take course i in order to take course j\n        vector<int> pre(n);\n        // build the prerequisites\n        for (auto& x : dependencies) {\n            // make it 0-based index\n            --x[0], --x[1];\n            // set the bit at x[0]-th place\n            pre[x[1]] |= 1 << x[0];\n        }\n        // base case: 0 semester. 0 course.\n        dp[0] = 0;\n        // i is a set of courses that we've already studied\n        for (int i = 0; i < (1 << n); i++) {\n            // init can as 0 to record how can courses we can study\n            int can = 0;\n            // iterate all courses\n            for (int j = 0; j < n; j++) {\n                // check if we've studied prerequisite courses\n                if ((pre[j] & i) == pre[j]) {\n                    // if so, we can study course j\n                    can |= (1 << j);\n                }\n            }\n            // remove those courses that we've already studied\n            can &= ~i;\n            // enumerate all the bit 1 combinations of `can`\n            // i.e. all subsets of a bit representation\n            for (int s = can; s ; s = (s - 1) & can) {\n                // check if we can take __builtin_popcount(s) courses\n                if (__builtin_popcount(s) <= k) {\n                    // if so, we combine the previous results (what've studied already)\n                    // or we take a new semester\n                    dp[i | s] = min(dp[i | s], dp[i] + 1);\n                }\n            }\n        }\n        // same as dp[(1 << n) - 1]\n        return dp.back();\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>o});var r=s(67294);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);