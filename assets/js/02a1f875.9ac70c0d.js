"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[65880],{78218:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=r(85893),t=r(11151);const a={description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",tags:["Array","Binary Search","Sorting","Heap (Priority Queue)","Matrix"]},s="1337 - The K Weakest Rows in a Matrix (Easy)",o={id:"1300-1399/the-k-weakest-rows-in-a-matrix-easy",title:"1337 - The K Weakest Rows in a Matrix (Easy)",description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",source:"@site/solutions/1300-1399/1337-the-k-weakest-rows-in-a-matrix-easy.md",sourceDirName:"1300-1399",slug:"/1300-1399/the-k-weakest-rows-in-a-matrix-easy",permalink:"/solutions/1300-1399/the-k-weakest-rows-in-a-matrix-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1337-the-k-weakest-rows-in-a-matrix-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"},{label:"Sorting",permalink:"/solutions/tags/sorting"},{label:"Heap (Priority Queue)",permalink:"/solutions/tags/heap-priority-queue"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:1337,frontMatter:{description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",tags:["Array","Binary Search","Sorting","Heap (Priority Queue)","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"1335 - Minimum Difficulty of a Job Schedule (Hard)",permalink:"/solutions/1300-1399/minimum-difficulty-of-a-job-schedule-hard"},next:{title:"1346 - Check If N and Its Double Exist (Easy)",permalink:"/solutions/1300-1399/check-if-n-and-its-double-exist-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Heap",id:"approach-2-heap",level:2},{value:"Approach 3: Binary Search",id:"approach-3-binary-search",level:2},{value:"Approach 4: Binary Search + Priority Queue",id:"approach-4-binary-search--priority-queue",level:2}];function h(n){const e={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",math:"math",mi:"mi",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,t.a)(),...n.components},{SolutionAuthor:r,TabItem:a,Tabs:s}=e;return r||p("SolutionAuthor",!0),a||p("TabItem",!0),s||p("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"1337---the-k-weakest-rows-in-a-matrix-easy",children:"1337 - The K Weakest Rows in a Matrix (Easy)"}),"\n",(0,i.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",children:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/"})}),"\n",(0,i.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(e.p,{children:["You are given an ",(0,i.jsx)(e.code,{children:"m x n"})," binary matrix ",(0,i.jsx)(e.code,{children:"mat"})," of ",(0,i.jsx)(e.code,{children:"1"}),"'s (representing soldiers) and ",(0,i.jsx)(e.code,{children:"0"}),"'s (representing civilians). The soldiers are positioned ",(0,i.jsx)(e.strong,{children:"in front"})," of the civilians. That is, all the ",(0,i.jsx)(e.code,{children:"1"}),"'s will appear to the ",(0,i.jsx)(e.strong,{children:"left"})," of all the ",(0,i.jsx)(e.code,{children:"0"}),"'s in each row."]}),"\n",(0,i.jsxs)(e.p,{children:["A row ",(0,i.jsx)(e.code,{children:"i"})," is ",(0,i.jsx)(e.strong,{children:"weaker"})," than a row ",(0,i.jsx)(e.code,{children:"j"})," if one of the following is true:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The number of soldiers in row ",(0,i.jsx)(e.code,{children:"i"})," is less than the number of soldiers in row ",(0,i.jsx)(e.code,{children:"j"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Both rows have the same number of soldiers and ",(0,i.jsx)(e.code,{children:"i < j"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Return ",(0,i.jsx)(e.em,{children:"the indices of the"})," ",(0,i.jsx)(e.code,{children:"k"})," _ ",(0,i.jsx)(e.strong,{children:"weakest"})," rows in the matrix ordered from weakest to strongest_."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\nOutput: [2,0,3]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\nOutput: [0,2]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1].\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"m == mat.length"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"n == mat[i].length"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"2 <= n, m <= 100"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"1 <= k <= m"})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"matrix[i][j]"})," is either 0 or 1."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"approach-1-brute-force",children:"Approach 1: Brute Force"}),"\n",(0,i.jsxs)(e.p,{children:["Iterate each row to find out the number of soldiers, store the count with the row index. Sort it and take the first ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsx)(e.mrow,{children:(0,i.jsx)(e.mi,{children:"k"})}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," counts."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(r,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<int> ans;\n        vector<pair<int, int>> a;\n        for (int i = 0; i < mat.size(); i++) {\n            a.push_back({\n                // number of soldiers\n                accumulate(mat[i].begin(), mat[i].end(), 0),\n                // row index\n                i\n            });\n        }\n        sort(a.begin(), a.end());\n        // or use partial_sort\n        // partial_sort(a.begin(), a.begin() + k, a.end());\n        for (int i = 0; i < k; i++) {\n            // add the count to answer\n            ans.push_back(a[i].second);\n        }\n        return ans;\n    }\n};\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-2-heap",children:"Approach 2: Heap"}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(a,{value:"py",label:"Python",children:[(0,i.jsx)(r,{name:"@heiheihang"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        rows = []\n        for i in range(len(mat)):\n            cnt = 0\n            for j in range(len(mat[i])):\n                if(mat[i][j] == 1):\n                    cnt += 1\n                else:\n                    break\n            heappush(rows, [-cnt, -i])\n            if len(rows) > k:\n                heappop(rows)\n        ans = []\n        while rows:\n            cnt, row = heappop(rows)\n            ans.append(-row)\n        ans.reverse()\n        return ans\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-3-binary-search",children:"Approach 3: Binary Search"}),"\n",(0,i.jsx)(e.p,{children:"Instead of searching linearly, we can use binary search to find out the number of soldiers. The rest is same as approach 1."}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(r,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (nums[m] == target) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<int> ans;\n        vector<pair<int, int>> a;\n        for (int i = 0; i < mat.size(); i++) {\n            a.push_back({\n                search(mat[i], 1),\n                // accumulate(mat[i].begin(), mat[i].end(), 0),\n                i\n            });\n        }        \n        sort(a.begin(), a.end());\n        // or use partial_sort\n        // partial_sort(a.begin(), a.begin() + k, a.end());\n        for (int i = 0; i < k; i++) {\n            ans.push_back(a[i].second);\n        }\n        return ans;\n    }\n};\n"})})]})}),"\n",(0,i.jsx)(e.h2,{id:"approach-4-binary-search--priority-queue",children:"Approach 4: Binary Search + Priority Queue"}),"\n",(0,i.jsx)(e.p,{children:"Instead of using a vector to store and sort, we use priority queue to handle the order."}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsxs)(a,{value:"cpp",label:"C++",children:[(0,i.jsx)(r,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (nums[m] == target) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<int> ans;\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        for (int i = 0; i < mat.size(); i++) {\n            pq.push({\n                search(mat[i], 1),\n                i\n            });\n        }\n        for (int i = 0; i < k; i++) {\n            ans.push_back(pq.top().second);\n            pq.pop();\n        }\n        return ans;\n    }\n};\n"})})]}),(0,i.jsxs)(a,{value:"kotlin",label:"Kotlin",children:[(0,i.jsx)(r,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-kt",children:"class Solution {\n    fun kWeakestRows(mat: Array<IntArray>, k: Int): IntArray {\n        var ans = IntArray(k)\n        var pq = PriorityQueue<Pair<Int, Int>>(compareBy( {it.first }, { it.second }))\n        fun search(nums: IntArray, target: Int): Int {\n            val n = nums.size\n            var l = 0\n            var r = n\n            while (l < r) {\n                var m = (l + r) / 2\n                if (nums[m] == target) l = m + 1\n                else r = m\n            }\n            return l\n        }\n        for (i in mat.indices) {\n            pq.add(Pair(search(mat[i], 1), i))\n        }\n        for (i in 0 until k) {\n            ans[i] = pq.poll().second\n        }\n        return ans\n    }\n}\n"})})]})]})]})}function d(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}function p(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(n,e,r)=>{r.d(e,{Z:()=>o,a:()=>s});var i=r(67294);const t={},a=i.createContext(t);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);