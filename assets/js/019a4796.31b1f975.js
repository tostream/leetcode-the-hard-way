"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70112],{67561:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(85893),i=t(11151);const s={description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/search-insert-position/"},a="0035 - Search Insert Position (Easy)",l={id:"0000-0099/search-insert-position-easy",title:"0035 - Search Insert Position (Easy)",description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/search-insert-position/",source:"@site/solutions/0000-0099/0035-search-insert-position-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/search-insert-position-easy",permalink:"/solutions/0000-0099/search-insert-position-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0035-search-insert-position-easy.md",tags:[],version:"current",sidebarPosition:35,frontMatter:{description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/search-insert-position/"},sidebar:"tutorialSidebar",previous:{title:"0034 - Find First and Last Position of Element in Sorted Array (Medium)",permalink:"/solutions/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium"},next:{title:"0036 - Valid Sudoku (Easy)",permalink:"/solutions/0000-0099/valid-sudoku-easy"}},o={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Built-in Function",id:"approach-1-built-in-function",level:2},{value:"Approach 2: Binary Search",id:"approach-2-binary-search",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...n.components},{SolutionAuthor:t,TabItem:s,Tabs:a}=e;return t||u("SolutionAuthor",!0),s||u("TabItem",!0),a||u("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"0035---search-insert-position-easy",children:"0035 - Search Insert Position (Easy)"}),"\n",(0,r.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/search-insert-position/",children:"https://leetcode.com/problems/search-insert-position/"})}),"\n",(0,r.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsx)(e.p,{children:"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."}),"\n",(0,r.jsxs)(e.p,{children:["You must write an algorithm with ",(0,r.jsx)(e.code,{children:"O(log n)"})," runtime complexity."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Input: nums = [1,3,5,6], target = 5\nOutput: 2\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Input: nums = [1,3,5,6], target = 2\nOutput: 1\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Input: nums = [1,3,5,6], target = 7\nOutput: 4\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"1 <= nums.length <= 10^4"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"-10^4 <= nums[i] <= 10^4"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"nums"})," contains ",(0,r.jsx)(e.strong,{children:"distinct"})," values sorted in ",(0,r.jsx)(e.strong,{children:"ascending"})," order."]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"-10^4 <= target <= 10^4"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"approach-1-built-in-function",children:"Approach 1: Built-in Function"}),"\n",(0,r.jsxs)(e.p,{children:["We can use STL to get the answer. lower_bound returns the first element which has a value not less than target. We need to subtract ",(0,r.jsx)(e.code,{children:"nums.begin()"})," to get the index."]}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsxs)(s,{value:"c++",label:"C++",children:[(0,r.jsx)(t,{name:"@wingkwong"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        return lower_bound(nums.begin(), nums.end(), target) - nums.begin();\n    }\n};\n"})})]}),(0,r.jsxs)(s,{value:"py",label:"Python",children:[(0,r.jsx)(t,{name:"@wingkwong"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        return bisect.bisect_left(nums, target)\n"})})]})]}),"\n",(0,r.jsx)(e.h2,{id:"approach-2-binary-search",children:"Approach 2: Binary Search"}),"\n",(0,r.jsx)(e.admonition,{title:"Prerequisite",type:"info",children:(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"../../tutorials/basic-topics/binary-search",children:"Binary Search"})}),"\n"]})}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsxs)(s,{value:"c++",label:"C++",children:[(0,r.jsx)(t,{name:"@wingkwong"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        // init the possible range\n        // as we insert at the end of the array,\n        // use nums.size() instead of nums.size() - 1\n        int l = 0, r = nums.size();\n        while (l < r) {\n            // take the lower mid for even elements\n            int m = l + (r - l) / 2;\n            // exclude m\n            if (target > nums[m]) l = m + 1;\n            // include m\n            else r = m;\n        }\n        return l;\n    }\n};\n"})})]}),(0,r.jsxs)(s,{value:"java",label:"Java",children:[(0,r.jsx)(t,{name:"@ganajayant"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"class Solution {\n    public static int searchInsert(int[] nums, int target) {\n        return binarySearch(nums, 0, nums.length - 1, target);\n    }\n\n    public static int binarySearch(int arr[], int l, int r, int x) {\n        if (r >= l) {\n            int mid = l + (r - l) / 2;\n            if (arr[mid] == x) {\n                return mid;\n            }\n            if (arr[mid] > x)\n                return binarySearch(arr, l, mid - 1, x);\n            return binarySearch(arr, mid + 1, r, x);\n        }\n        return r + 1;\n    }\n}\n"})})]}),(0,r.jsxs)(s,{value:"python",label:"Python",children:[(0,r.jsx)(t,{name:"@radojicic23"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n\n        while left <= right:\n            # find mid value\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # if mid value is less than target\n            elif nums[mid] < target:\n                # we are in right sorted portion\n                left = mid + 1\n            # if mid value is greater than target\n            else:\n                # we are in left sorted portion\n                right = mid - 1\n\n        return left\n"})})]}),(0,r.jsxs)(s,{value:"js",label:"JavaScript",children:[(0,r.jsx)(t,{name:"@radojicic23"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function (nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left <= right) {\n    let mid = Math.floor((left + right) / 2);\n    if (target == nums[mid]) {\n      return mid;\n    } else if (target < nums[mid]) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left;\n};\n"})})]})]})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}function u(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>a});var r=t(67294);const i={},s=r.createContext(i);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);