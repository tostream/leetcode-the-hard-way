"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70709],{23210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=t(85893),r=t(11151);const i={description:"Author: @wingkwong | https://leetcode.com/problems/top-k-frequent-elements/"},o="0347 - Top K Frequent Elements (Medium)",a={id:"0300-0399/top-k-frequent-elements-medium",title:"0347 - Top K Frequent Elements (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/top-k-frequent-elements/",source:"@site/solutions/0300-0399/0347-top-k-frequent-elements-medium.md",sourceDirName:"0300-0399",slug:"/0300-0399/top-k-frequent-elements-medium",permalink:"/solutions/0300-0399/top-k-frequent-elements-medium",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0347-top-k-frequent-elements-medium.md",tags:[],version:"current",sidebarPosition:347,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/top-k-frequent-elements/"},sidebar:"tutorialSidebar",previous:{title:"0346 - Moving Average from Data Stream (Easy)",permalink:"/solutions/0300-0399/moving-average-from-data-stream-easy"},next:{title:"0349 - Intersection of Two Arrays (Easy)",permalink:"/solutions/0300-0399/intersection-of-two-arrays-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}];function m(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",math:"math",mi:"mi",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"0347---top-k-frequent-elements-medium",children:"0347 - Top K Frequent Elements (Medium)"}),"\n",(0,s.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/top-k-frequent-elements/",children:"https://leetcode.com/problems/top-k-frequent-elements/"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["Given an integer array ",(0,s.jsx)(n.code,{children:"nums"})," and an integer ",(0,s.jsx)(n.code,{children:"k"}),", return ",(0,s.jsx)(n.em,{children:"the"})," ",(0,s.jsx)(n.code,{children:"k"})," ",(0,s.jsx)(n.em,{children:"most frequent elements"}),". You may return the answer in ",(0,s.jsx)(n.strong,{children:"any order"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [1], k = 1\nOutput: [1]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"1 <= nums.length <= 10^5"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"k"})," is in the range ",(0,s.jsx)(n.code,{children:"[1, the number of unique elements in the array]"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["It is ",(0,s.jsx)(n.strong,{children:"guaranteed"})," that the answer is ",(0,s.jsx)(n.strong,{children:"unique"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Follow up:"})," Your algorithm's time complexity must be better than ",(0,s.jsx)(n.code,{children:"O(n log n)"}),", where n is the array's size."]}),"\n",(0,s.jsx)(n.h2,{id:"approach-1-priority-queue",children:"Approach 1: Priority Queue"}),"\n",(0,s.jsx)(n.p,{children:'When you need to solve something started with "Top K ...", priority queue may possibly be the solution.'}),"\n",(0,s.jsxs)(n.p,{children:["We use priority queue to sort the input by their frequency and pop the top element when the queue size is greater than ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"k"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]}),". What's left in the queue would be the top ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"k"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," frequent elements and we just list them out in a reverse order."]}),"\n",(0,s.jsx)(t,{name:"@wingkwong"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        int n = nums.size();\n        if(n == k) return nums;\n        map<int, int> m;\n        // store the frequency of each number\n        for(auto x : nums) m[x]++;\n        // define a custom comparator\n        auto cmp = [&](int x, int y) {\n            return m[x] > m[y];\n        };\n        // init priority queue with a custom comparator\n        priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);\n        // iterate each number\n        for(auto x : m) {\n            // add this number\n            pq.push(x.first);\n            // out of queue size, pop the one with min frequency out\n            if(pq.size() > k) {\n                pq.pop();\n            }\n        }\n        // construct ans\n        vector<int> ans(k);\n        for(int i = k - 1; i >= 0; i--) {\n            ans[i] = pq.top(); \n            pq.pop();\n        }\n        return ans;\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(67294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);