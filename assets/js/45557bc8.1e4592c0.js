"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[52107],{53010:(s,n,e)=>{e.r(n),e.d(n,{assets:()=>m,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var a=e(85893),i=e(11151);const l={description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/maximum-and-sum-of-array/"},t="2172 - Maximum AND Sum of Array (Hard)",r={id:"2100-2199/maximum-and-sum-of-array-hard",title:"2172 - Maximum AND Sum of Array (Hard)",description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/maximum-and-sum-of-array/",source:"@site/solutions/2100-2199/2172-maximum-and-sum-of-array-hard.md",sourceDirName:"2100-2199",slug:"/2100-2199/maximum-and-sum-of-array-hard",permalink:"/solutions/2100-2199/maximum-and-sum-of-array-hard",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2172-maximum-and-sum-of-array-hard.md",tags:[],version:"current",sidebarPosition:2172,frontMatter:{description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/maximum-and-sum-of-array/"},sidebar:"tutorialSidebar",previous:{title:"2171 - Removing Minimum Number of Magic Beans (Medium)",permalink:"/solutions/2100-2199/removing-minimum-number-of-magic-beans-medium"},next:{title:"2176 - Count Equal and Divisible Pairs in an Array (Easy)",permalink:"/solutions/2100-2199/count-equal-and-divisible-pairs-in-an-array-easy"}},m={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Bitmask DP",id:"approach-2-bitmask-dp",level:2},{value:"Approach 3: MCMF",id:"approach-3-mcmf",level:2}];function h(s){const n={a:"a",admonition:"admonition",annotation:"annotation",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.a)(),...s.components},{Details:e,SolutionAuthor:l}=n;return e||o("Details",!0),l||o("SolutionAuthor",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"2172---maximum-and-sum-of-array-hard",children:"2172 - Maximum AND Sum of Array (Hard)"}),"\n",(0,a.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsxs)(n.p,{children:["You are given an integer array ",(0,a.jsx)(n.code,{children:"nums"})," of length ",(0,a.jsx)(n.code,{children:"n"})," and an integer ",(0,a.jsx)(n.code,{children:"numSlots"})," such that ",(0,a.jsx)(n.code,{children:"2 * numSlots >= n"}),". There are ",(0,a.jsx)(n.code,{children:"numSlots"})," slots numbered from ",(0,a.jsx)(n.code,{children:"1"})," to ",(0,a.jsx)(n.code,{children:"numSlots"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You have to place all ",(0,a.jsx)(n.code,{children:"n"})," integers into the slots such that each slot contains at ",(0,a.jsx)(n.strong,{children:"most"})," two numbers. The ",(0,a.jsx)(n.strong,{children:"AND sum"})," of a given placement is the sum of the ",(0,a.jsx)(n.strong,{children:"bitwise"})," ",(0,a.jsx)(n.code,{children:"AND"})," of every number with its respective slot number."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["For example, the ",(0,a.jsx)(n.strong,{children:"AND sum"})," of placing the numbers ",(0,a.jsx)(n.code,{children:"[1, 3]"})," into slot ",(0,a.jsx)(n.code,{children:"1"})," and ",(0,a.jsx)(n.code,{children:"[4, 6]"})," into slot ",(0,a.jsx)(n.code,{children:"2"})," is equal to ",(0,a.jsx)(n.code,{children:"(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Return ",(0,a.jsxs)(n.em,{children:["the maximum possible ",(0,a.jsx)(n.strong,{children:"AND sum"})," of"]})," ",(0,a.jsx)(n.code,{children:"nums"})," ",(0,a.jsx)(n.em,{children:"given"})," ",(0,a.jsx)(n.code,{children:"numSlots"})," ",(0,a.jsx)(n.em,{children:"slots."})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: nums = [1,2,3,4,5,6], numSlots = 3\nOutput: 9\nExplanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. \nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Input: nums = [1,3,10,4,7,1], numSlots = 9\nOutput: 24\nExplanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted.\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"n == nums.length"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= numSlots <= 9"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= n <= 2 * numSlots"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"1 <= nums[i] <= 15"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"approach-1-brute-force",children:"Approach 1: Brute Force"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"This approach is prepared by @heiheihang."})}),"\n",(0,a.jsx)(n.p,{children:"Naive backtracking"}),"\n",(0,a.jsx)(l,{name:"@heiheihang"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maximumANDSum(self, nums: List[int], numSlots: int) -> int:\n        \n        #store the number of elements in each slot\n        slots = defaultdict(int)\n        val = 0\n        res = 0\n        \n        def backtrack(idx):\n            \n            #return 0 when reaches the end of nums\n            if(idx == len(nums)):\n                return 0\n            \n            #store the maximum result    \n            res = 0\n            \n            #iterate all slots\n            for i in range(numSlots):\n                \n                #naive pruning for trivial results\n                if(nums[idx] & (i+1) == 0 or slots[i+1] == 2):\n                    continue\n                \n                #update if we want to take that number at ith slot\n                slots[i+1] += 1\n                \n                #backtrack\n                res = max(res, backtrack(idx+1) + ((i+1) & nums[idx]))\n                \n                #resume state\n                slots[i+1] -= 1\n            \n            #final backtrack for not using the current number\n            backtrack(idx+1) \n                \n        return backtrack(0)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"approach-2-bitmask-dp",children:"Approach 2: Bitmask DP"}),"\n",(0,a.jsxs)(n.p,{children:["We notice that the naive approach is too inefficient. There are some repetitions in the combination of numbers in slots. We can take advantage of that by storing the state of the slots (utilizing the ",(0,a.jsx)(n.code,{children:"slots"})," dictionary from brute force!)"]}),"\n",(0,a.jsx)(n.p,{children:"To do this, we use bits. Each slot has 3 states: 0 element, 1 element, 2 elements. We need to use 2 bits to represent each slot. We can use a single integer to cover potentially 18 bits, but its implementation is more complicated than using two separate bit masks."}),"\n",(0,a.jsxs)(n.p,{children:["We can use the ",(0,a.jsx)(n.em,{children:"ith"})," bit ",(0,a.jsx)(n.code,{children:"mask1"})," to represent if the ",(0,a.jsx)(n.em,{children:"ith"})," slot has 0 or 1 element. We can use the ",(0,a.jsx)(n.em,{children:"ith"})," bit of ",(0,a.jsx)(n.code,{children:"mask2"})," to represent if the ",(0,a.jsx)(n.em,{children:"ith"})," slot has 2 elements."]}),"\n",(0,a.jsx)(n.p,{children:"We need to use some bit manipulation to update the states."}),"\n",(0,a.jsx)(l,{name:"@heiheihang"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def maximumANDSum(self, nums: List[int], numSlots: int) -> int:\n        \n        \n        #mask 1 represents if the slot has 0 or 1 element\n        #mask 2 represents if the slot has 2 element \n        @lru_cache(None)\n        def dp(i, mask1, mask2):\n            \n            #reached the end of nums\n            if(i == len(nums)):\n                return 0\n            \n            #set the initial result\n            res = 0\n            \n            #iterate all slots\n            for j in range(numSlots):\n                \n                #check if slot is full\n                #both slots are filled\n                if(mask2 & (1 << j) != 0):\n                    continue\n                else:\n                    newMask1 = mask1\n                    newMask2 = mask2\n                    \n                    #slot is empty\n                    if(mask1 & (1 << j) == 0):\n                        #set mask 1 to \n                        newMask1 = mask1 | (1 << j)\n                    #slot has 1 element\n                    else:\n                        #clear mask 1 \n                        newMask1 = mask1 ^ (1 << j)\n                        newMask2 = mask2 | (1 << j)\n                        \n                    res = max(res, dp(i+1, newMask1, newMask2) + (nums[i] & (j+1)))\n                    \n            return res\n        \n        return dp(0,0,0)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"approach-3-mcmf",children:"Approach 3: MCMF"}),"\n",(0,a.jsx)(n.admonition,{title:"Prerequisite",type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"MCMF"}),"\n"]})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["MCMF tutorial will not be included here. Please check out ",(0,a.jsx)(n.a,{href:"https://cp-algorithms.com/graph/min_cost_flow.html",children:"https://cp-algorithms.com/graph/min_cost_flow.html"})," for more."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["We can think of ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"nums"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]})," as the source of a bipartite graph and ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"slots"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]})," as the destination. If we add two more vertices ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"r"}),(0,a.jsx)(n.mi,{children:"c"}),(0,a.jsx)(n.mi,{children:"e"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"source"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"so"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"rce"})]})})]})," before ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"nums"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]})," and ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"i"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"k"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"sink"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"ink"})]})})]})," after ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"slots"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]}),", then we can easily solve it using standard MCMF template."]}),"\n",(0,a.jsxs)(e,{children:[(0,a.jsx)("summary",{children:"MCMF Template"}),(0,a.jsxs)(n.p,{children:["This ",(0,a.jsx)(n.a,{href:"https://github.com/ShahjalalShohag/code-library/blob/master/Graph%20Theory/Min%20Cost%20Max%20Flow.cpp",children:"template"})," is created by Shahjalal Shohag."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"using T = long long;\nconst T inf = 1LL << 61;\nstruct MCMF {\n  struct edge {\n    int u, v;\n    T cap, cost;\n    int id;\n    edge(int _u, int _v, T _cap, T _cost, int _id) {\n      u = _u;\n      v = _v;\n      cap = _cap;\n      cost = _cost;\n      id = _id;\n    }\n  };\n  int n, s, t, mxid;\n  T flow, cost;\n  vector<vector<int>> g;\n  vector<edge> e;\n  vector<T> d, potential, flow_through;\n  vector<int> par;\n  bool neg;\n  MCMF() {}\n  MCMF(int _n) { // 0-based indexing\n    n = _n + 10;\n    g.assign(n, vector<int> ());\n    neg = false;\n    mxid = 0;\n  }\n  void add_edge(int u, int v, T cap, T cost, int id = -1, bool directed = true) {\n    if(cost < 0) neg = true;\n    g[u].push_back(e.size());\n    e.push_back(edge(u, v, cap, cost, id));\n    g[v].push_back(e.size());\n    e.push_back(edge(v, u, 0, -cost, -1));\n    mxid = max(mxid, id);\n    if(!directed) add_edge(v, u, cap, cost, -1, true);\n  }\n  bool dijkstra() {\n    par.assign(n, -1);\n    d.assign(n, inf);\n    priority_queue<pair<T, T>, vector<pair<T, T>>, greater<pair<T, T>> > q;\n    d[s] = 0;\n    q.push(pair<T, T>(0, s));\n    while (!q.empty()) {\n      int u = q.top().second;\n      T nw = q.top().first;\n      q.pop();\n      if(nw != d[u]) continue;\n      for (int i = 0; i < (int)g[u].size(); i++) {\n        int id = g[u][i];\n        int v = e[id].v;\n        T cap = e[id].cap;\n        T w = e[id].cost + potential[u] - potential[v];\n        if (d[u] + w < d[v] && cap > 0) {\n          d[v] = d[u] + w;\n          par[v] = id;\n          q.push(pair<T, T>(d[v], v));\n        }\n      }\n    }\n    for (int i = 0; i < n; i++) { // update potential\n      if(d[i] < inf) potential[i] += d[i];\n    }\n    return d[t] != inf;\n  }\n  T send_flow(int v, T cur) {\n    if(par[v] == -1) return cur;\n    int id = par[v];\n    int u = e[id].u;\n    T w = e[id].cost;\n    T f = send_flow(u, min(cur, e[id].cap));\n    cost += f * w;\n    e[id].cap -= f;\n    e[id ^ 1].cap += f;\n    return f;\n  }\n  //returns {maxflow, mincost}\n  pair<T, T> solve(int _s, int _t, T goal = inf) {\n    s = _s;\n    t = _t;\n    flow = 0, cost = 0;\n    potential.assign(n, 0);\n    if (neg) {\n      // run Bellman-Ford to find starting potential\n      d.assign(n, inf);\n      for (int i = 0, relax = true; i < n && relax; i++) {\n        for (int u = 0; u < n; u++) {\n          for (int k = 0; k < (int)g[u].size(); k++) {\n            int id = g[u][k];\n            int v = e[id].v;\n            T cap = e[id].cap, w = e[id].cost;\n            if (d[v] > d[u] + w && cap > 0) {\n              d[v] = d[u] + w;\n              relax = true;\n            }\n          }\n        }\n      }\n      for(int i = 0; i < n; i++) if(d[i] < inf) potential[i] = d[i];\n    }\n    while (flow < goal && dijkstra()) flow += send_flow(t, goal - flow);\n    flow_through.assign(mxid + 10, 0);\n    for (int u = 0; u < n; u++) {\n      for (auto v : g[u]) {\n        if (e[v].id >= 0) flow_through[e[v].id] = e[v ^ 1].cap;\n      }\n    }\n    return make_pair(flow, cost);\n  }\n}\n"})})]}),"\n",(0,a.jsxs)(n.p,{children:["Let's build the graph. We have ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mo,{stretchy:"false",children:")"}),(0,a.jsx)(n.mo,{children:"+"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"("}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mo,{stretchy:"false",children:")"}),(0,a.jsx)(n.mo,{children:"+"}),(0,a.jsx)(n.mn,{children:"2"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"len(nums) + len(slots) + 2"})]})})}),(0,a.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mclose",children:")"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(n.span,{className:"mbin",children:"+"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"e"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mopen",children:"("}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mclose",children:")"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(n.span,{className:"mbin",children:"+"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"2"})]})]})]})," vertices in total (including ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"r"}),(0,a.jsx)(n.mi,{children:"c"}),(0,a.jsx)(n.mi,{children:"e"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"source"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"so"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"rce"})]})})]})," and ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"i"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"k"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"sink"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"ink"})]})})]}),"). You may treat all vertices in a 1D array in the following order with 0-base indexing."]}),"\n",(0,a.jsx)(n.span,{className:"katex-display",children:(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"r"}),(0,a.jsx)(n.mi,{children:"c"}),(0,a.jsx)(n.mi,{children:"e"}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"["}),(0,a.jsx)(n.mn,{children:"0"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"]"}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"["}),(0,a.jsx)(n.mn,{children:"1"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"]"}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"["}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mo,{children:"\u2212"}),(0,a.jsx)(n.mn,{children:"1"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"]"}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsxs)(n.msub,{children:[(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mn,{children:"1"})]}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsxs)(n.msub,{children:[(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mn,{children:"2"})]}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"."}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"l"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsxs)(n.msub,{children:[(0,a.jsx)(n.mi,{children:"t"}),(0,a.jsx)(n.mi,{children:"k"})]}),(0,a.jsx)(n.mo,{separator:"true",children:","}),(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"i"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"k"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"source, nums[0], nums[1], ... ,nums[n - 1], slot_1, slot_2, .., slot_k, sink"})]})})}),(0,a.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"so"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"rce"}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mopen",children:"["}),(0,a.jsx)(n.span,{className:"mord",children:"0"}),(0,a.jsx)(n.span,{className:"mclose",children:"]"}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mopen",children:"["}),(0,a.jsx)(n.span,{className:"mord",children:"1"}),(0,a.jsx)(n.span,{className:"mclose",children:"]"}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord",children:"..."}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mopen",children:"["}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord",children:"1"}),(0,a.jsx)(n.span,{className:"mclose",children:"]"}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsxs)(n.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(n.span,{className:"vlist-r",children:[(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(n.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mtight",children:"1"})})]})}),(0,a.jsx)(n.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(n.span,{})})})]})})]}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsxs)(n.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(n.span,{className:"vlist-r",children:[(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(n.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mtight",children:"2"})})]})}),(0,a.jsx)(n.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(n.span,{})})})]})})]}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord",children:".."}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsxs)(n.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(n.span,{className:"vlist-r",children:[(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.3361em"},children:(0,a.jsxs)(n.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mathnormal mtight",style:{marginRight:"0.03148em"},children:"k"})})]})}),(0,a.jsx)(n.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(n.span,{})})})]})})]}),(0,a.jsx)(n.span,{className:"mpunct",children:","}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"ink"})]})]})]})}),"\n",(0,a.jsxs)(n.p,{children:["Now we need to create the edges from ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"o"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"r"}),(0,a.jsx)(n.mi,{children:"c"}),(0,a.jsx)(n.mi,{children:"e"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"source"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"so"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"rce"})]})})]})," to each element in ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"nums"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]})," with ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"1"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"1"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"1"})]})})]})," capacity and ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"0"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"0"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"0"})]})})]})," cost. Then we create the edges from each element in ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"u"}),(0,a.jsx)(n.mi,{children:"m"}),(0,a.jsx)(n.mi,{children:"s"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"nums"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"u"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"})]})})]})," to each slot with ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"1"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"1"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"1"})]})})]})," capacity and ",(0,a.jsx)(n.span,{className:"katex-error",title:"ParseError: KaTeX parse error: Expected 'EOF', got '&' at position 15: -(nums[i - 1] &\u0332 slot)",style:{color:"#cc0000"},children:"-(nums[i - 1] & slot)"}),". The minus sign is here because this MCMF template is to calculate the minimum cost and this problem is asking for the maximum one. Similarly, we create edges from each slot to ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"s"}),(0,a.jsx)(n.mi,{children:"i"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mi,{children:"k"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"sink"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"ink"})]})})]})," with ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"2"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"2"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"2"})]})})]})," capacities (because each slot at most contains 2 elements) and ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mn,{children:"0"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"0"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(n.span,{className:"mord",children:"0"})]})})]})," cost."]}),"\n",(0,a.jsx)(l,{name:"@wingkwong"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maximumANDSum(vector<int>& nums, int slots) {\n        int n = (int) nums.size();\n        // n + slots + 1 (source) + 1 (sink)\n        int vertices = n + slots + 2; \n        // [source, ...nums..., ...slots..., sink]\n        int source = 0, sink = vertices - 1; // 0-based indexing\n        MCMF F(vertices);\n        for (int i = 1; i <= n; i++) {\n            // from source (0) to each element in nums (i)\n            // with 1 capacity and 0 cost\n            F.add_edge(0, i, 1, 0);\n            for (int slot = 1; slot <= slots; slot++) {\n                // from each element in nums (i) to each slot (slot)\n                // with 1 capacity and -(nums[i - 1] & slot) cost\n                // negative sign for getting the max cost\n                F.add_edge(i, slot + n, 1, -(nums[i - 1] & slot));\n            }\n        }\n        for (int slot = 1; slot <= slots; slot++) {\n            // from each slot to sink\n            // with 2 capacities and 0 cost\n            F.add_edge(slot + n, sink, 2, 0);\n        }\n        // get the cost from source to sink\n        // solve() return {max_flow, min_cost} \n        // we just need the latter one\n        return -F.solve(source, sink, n).second;\n    }\n};\n"})})]})}function d(s={}){const{wrapper:n}={...(0,i.a)(),...s.components};return n?(0,a.jsx)(n,{...s,children:(0,a.jsx)(h,{...s})}):h(s)}function o(s,n){throw new Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(s,n,e)=>{e.d(n,{Z:()=>r,a:()=>t});var a=e(67294);const i={},l=a.createContext(i);function t(s){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof s?s(n):{...n,...s}}),[n,s])}function r(s){let n;return n=s.disableParentContext?"function"==typeof s.components?s.components(i):s.components||i:t(s.components),a.createElement(l.Provider,{value:n},s.children)}}}]);