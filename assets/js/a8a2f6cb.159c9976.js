"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[24436],{86654:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>h});var t=r(85893),a=r(11151);const o={description:"Author: @wingkwong | https://leetcode.com/problems/rank-transform-of-an-array",tags:["Sorting"]},s="1331 - Rank Transform of an Array (Easy)",i={id:"1300-1399/rank-transform-of-an-array-easy",title:"1331 - Rank Transform of an Array (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/rank-transform-of-an-array",source:"@site/solutions/1300-1399/1331-rank-transform-of-an-array-easy.md",sourceDirName:"1300-1399",slug:"/1300-1399/rank-transform-of-an-array-easy",permalink:"/solutions/1300-1399/rank-transform-of-an-array-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1331-rank-transform-of-an-array-easy.md",tags:[{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:1331,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/rank-transform-of-an-array",tags:["Sorting"]},sidebar:"tutorialSidebar",previous:{title:"1329 - Sort the Matrix Diagonally (Medium)",permalink:"/solutions/1300-1399/sort-the-matrix-diagonally-medium"},next:{title:"1334 - Find the City With the Smallest Number of Neighbors at a Threshold Distance (Medium)",permalink:"/solutions/1300-1399/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance-medium"}},l={},h=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting with Hash Map",id:"approach-1-sorting-with-hash-map",level:2},{value:"Approach 2: Sorting without Hash Map",id:"approach-2-sorting-without-hash-map",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...n.components},{SolutionAuthor:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"1331---rank-transform-of-an-array-easy",children:"1331 - Rank Transform of an Array (Easy)"}),"\n",(0,t.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/rank-transform-of-an-array",children:"https://leetcode.com/problems/rank-transform-of-an-array"})}),"\n",(0,t.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(e.p,{children:["Given an array of integers ",(0,t.jsx)(e.code,{children:"arr"}),", replace each element with its rank."]}),"\n",(0,t.jsx)(e.p,{children:"The rank represents how large the element is. The rank has the following rules:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Rank is an integer starting from 1."}),"\n",(0,t.jsx)(e.li,{children:"The larger the element, the larger the rank. If two elements are equal, their rank must be the same."}),"\n",(0,t.jsx)(e.li,{children:"Rank should be as small as possible."}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: arr = [100,100,100]\nOutput: [1,1,1]\nExplanation: Same elements share the same rank.\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Input: arr = [37,12,28,9,100,56,80,5,12]\nOutput: [5,3,4,2,8,6,7,1,3]\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"0 <= arr.length <= 10^5"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"-10^9 <= arr[i] <= 10^9"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"approach-1-sorting-with-hash-map",children:"Approach 1: Sorting with Hash Map"}),"\n",(0,t.jsx)(r,{name:"@wingkwong"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> arrayRankTransform(vector<int>& arr) {\n        vector<int> ans, sorted_arr { arr };\n        // hash map\n        unordered_map<int, int> m;\n        // sort input arr\n        sort(sorted_arr.begin(), sorted_arr.end());\n        // [40,10,20,30] -> [10,20,30,40]\n        // use hash map to map the sorted element with its index\n        // use emplace to handle cases like [100,100,100]\n        for (auto& x : sorted_arr) m.emplace(x, (int) m.size() + 1);\n        // build the final output\n        for (auto& x : arr) ans.push_back(m[x]);\n        return ans;\n    }\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"approach-2-sorting-without-hash-map",children:"Approach 2: Sorting without Hash Map"}),"\n",(0,t.jsx)(r,{name:"@wingkwong"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> arrayRankTransform(vector<int>& arr) {\n        int n = (int) arr.size();\n        vector<pair<int, int>> v; // {val, index}\n        for (int i = 0; i < n; i++) v.push_back({arr[i], i});\n        // sort by value\n        sort(v.begin(), v.end());\n        // init rank\n        int rank = 1;\n        for (int i = 0; i < n; i++) {\n            // increase rank only when the cur val is different than the prev one\n            rank += i > 0 && v[i].first != v[i - 1].first;\n            // in-place update arr\n            arr[v[i].second] = rank;\n        }\n        return arr;\n    }\n};\n"})})]})}function d(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},11151:(n,e,r)=>{r.d(e,{Z:()=>i,a:()=>s});var t=r(67294);const a={},o=t.createContext(a);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);