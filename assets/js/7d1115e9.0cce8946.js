"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[34939],{99872:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=t(85893),a=t(11151);const r={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/",tags:["Dynamic Programming"]},o="1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)",i={id:"1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",title:"1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/",source:"@site/solutions/1200-1299/1269-number-of-ways-to-stay-in-the-same-place-after-some-steps-hard.md",sourceDirName:"1200-1299",slug:"/1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",permalink:"/solutions/1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1200-1299/1269-number-of-ways-to-stay-in-the-same-place-after-some-steps-hard.md",tags:[{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:1269,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/",tags:["Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"1259 - Handshakes That Don't Cross (Hard)",permalink:"/solutions/1200-1299/handshakes-that-dont-cross-hard"},next:{title:"1281 - Subtract the Product and Sum of Digits of an Integer (Easy)",permalink:"/solutions/1200-1299/subtract-the-product-and-sum-of-digits-of-an-integer-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}];function h(e){const s={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",li:"li",math:"math",mi:"mi",mn:"mn",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{SolutionAuthor:t}=s;return t||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"1269---number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",children:"1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)"}),"\n",(0,n.jsx)(s.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/",children:"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/"})}),"\n",(0,n.jsx)(s.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,n.jsxs)(s.p,{children:["You have a pointer at index ",(0,n.jsx)(s.code,{children:"0"})," in an array of size ",(0,n.jsx)(s.code,{children:"arrLen"}),". At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time)."]}),"\n",(0,n.jsxs)(s.p,{children:["Given two integers ",(0,n.jsx)(s.code,{children:"steps"})," and ",(0,n.jsx)(s.code,{children:"arrLen"}),", return the number of ways such that your pointer still at index ",(0,n.jsx)(s.code,{children:"0"})," after ",(0,n.jsx)(s.strong,{children:"exactly"})," ",(0,n.jsx)(s.code,{children:"steps"})," steps. Since the answer may be too large, return it ",(0,n.jsx)(s.strong,{children:"modulo"})," ",(0,n.jsx)(s.code,{children:"109 + 7"}),"."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example 1:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"Input: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example 2:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"Input: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Example 3:"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"Input: steps = 4, arrLen = 2\nOutput: 8\n"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Constraints:"})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"1 <= steps <= 500"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"1 <= arrLen <= 10^6"})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,n.jsxs)(s.p,{children:["The first observation is that the computational complexity does not depend on ",(0,n.jsxs)(s.span,{className:"katex",children:[(0,n.jsx)(s.span,{className:"katex-mathml",children:(0,n.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(s.semantics,{children:[(0,n.jsxs)(s.mrow,{children:[(0,n.jsx)(s.mi,{children:"a"}),(0,n.jsx)(s.mi,{children:"r"}),(0,n.jsx)(s.mi,{children:"r"}),(0,n.jsx)(s.mi,{children:"L"}),(0,n.jsx)(s.mi,{children:"e"}),(0,n.jsx)(s.mi,{children:"n"})]}),(0,n.jsx)(s.annotation,{encoding:"application/x-tex",children:"arrLen"})]})})}),(0,n.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(s.span,{className:"base",children:[(0,n.jsx)(s.span,{className:"strut",style:{height:"0.6833em"}}),(0,n.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,n.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"rr"}),(0,n.jsx)(s.span,{className:"mord mathnormal",children:"L"}),(0,n.jsx)(s.span,{className:"mord mathnormal",children:"e"}),(0,n.jsx)(s.span,{className:"mord mathnormal",children:"n"})]})})]}),". Instead, it is all about steps. If we have ",(0,n.jsxs)(s.span,{className:"katex",children:[(0,n.jsx)(s.span,{className:"katex-mathml",children:(0,n.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(s.semantics,{children:[(0,n.jsx)(s.mrow,{children:(0,n.jsx)(s.mi,{children:"n"})}),(0,n.jsx)(s.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,n.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(s.span,{className:"base",children:[(0,n.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,n.jsx)(s.span,{className:"mord mathnormal",children:"n"})]})})]})," steps, we can only walk at most ",(0,n.jsxs)(s.span,{className:"katex",children:[(0,n.jsx)(s.span,{className:"katex-mathml",children:(0,n.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,n.jsxs)(s.semantics,{children:[(0,n.jsxs)(s.mrow,{children:[(0,n.jsx)(s.mi,{children:"n"}),(0,n.jsx)(s.mi,{mathvariant:"normal",children:"/"}),(0,n.jsx)(s.mn,{children:"2"})]}),(0,n.jsx)(s.annotation,{encoding:"application/x-tex",children:"n / 2"})]})})}),(0,n.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,n.jsxs)(s.span,{className:"base",children:[(0,n.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,n.jsx)(s.span,{className:"mord",children:"/2"})]})})]})," steps to the left or the right. Therefore, we can use DFS with memoization to find out the answer."]}),"\n",(0,n.jsx)(t,{name:"@wingkwong"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int numWays(int steps, int arrLen) {\n        int M = 1e9 + 7;\n        // dp[i][j]: how many ways to reach i-th pos using j steps\n        vector<vector<int>> dp(steps / 2 + 1, vector<int>(steps + 1, -1));\n        function<long long(int,int)> dfs = [&](int pos, int steps) -> long long {\n            // if we walk outside the array or use all the steps\n            // then return 0\n            if (pos < 0 || pos > arrLen - 1 || pos > steps) return 0;\n            // if we use all the steps, return 1 only if pos is 0\n            if (steps == 0) return pos == 0;\n            // if it has been calculated, return directly\n            if (dp[pos][steps] != -1) return dp[pos][steps];\n            // memoize it\n            return dp[pos][steps] = (\n                // move to the left\n                dfs(pos - 1, steps - 1) % M + \n                // stay at current position\n                dfs(pos, steps - 1) % M + \n                // move to the right\n                dfs(pos + 1, steps - 1) % M\n            ) % M;\n        };\n        return dfs(0, steps);\n    }\n};\n"})}),"\n",(0,n.jsx)(t,{name:"@wingkwong"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-py",children:"class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        M = 10 ** 9 + 7\n        @lru_cache(None)\n        def dfs(pos, steps):\n            # if we walk outside the array or use all the steps\n            # then return 0\n            if pos < 0 or pos > steps or pos > arrLen - 1: return 0\n            # if we use all the steps, return 1 only if pos is 0\n            if steps == 0: return pos == 0\n            return (\n                # move to the left\n                dfs(pos - 1, steps - 1) +\n                # stay at current position\n                dfs(pos, steps - 1) +\n                # move to the right\n                dfs(pos + 1, steps - 1) \n            ) % M\n        return dfs(0, steps)\n"})})]})}function m(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>i,a:()=>o});var n=t(67294);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);