"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[13881],{75631:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(85893),r=t(11151);const s={description:"Author: @heiheihang | https://leetcode.com/problems/concatenation-of-array/"},i="1929 - Concatenation of Array (Easy)",a={id:"1900-1999/concatenation-of-array-easy",title:"1929 - Concatenation of Array (Easy)",description:"Author: @heiheihang | https://leetcode.com/problems/concatenation-of-array/",source:"@site/solutions/1900-1999/1929-concatenation-of-array-easy.md",sourceDirName:"1900-1999",slug:"/1900-1999/concatenation-of-array-easy",permalink:"/solutions/1900-1999/concatenation-of-array-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1900-1999/1929-concatenation-of-array-easy.md",tags:[],version:"current",sidebarPosition:1929,frontMatter:{description:"Author: @heiheihang | https://leetcode.com/problems/concatenation-of-array/"},sidebar:"tutorialSidebar",previous:{title:"1926 - Nearest Exit from Entrance in Maze (Medium)",permalink:"/solutions/1900-1999/nearest-exit-from-entrance-in-maze-medium"},next:{title:"1980 - Find Unique Binary String (Medium)",permalink:"/solutions/1900-1999/find-unique-binary-string-medium"}},c={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iteration",id:"approach-1-iteration",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...n.components},{SolutionAuthor:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"1929---concatenation-of-array-easy",children:"1929 - Concatenation of Array (Easy)"}),"\n",(0,o.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://leetcode.com/problems/concatenation-of-array/",children:"https://leetcode.com/problems/concatenation-of-array/"})}),"\n",(0,o.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(e.p,{children:["Given an integer array ",(0,o.jsx)(e.code,{children:"nums"})," of length ",(0,o.jsx)(e.code,{children:"n"}),", you want to create an array ",(0,o.jsx)(e.code,{children:"ans"})," of length ",(0,o.jsx)(e.code,{children:"2n"})," where ",(0,o.jsx)(e.code,{children:"ans[i] == nums[i]"})," and ",(0,o.jsx)(e.code,{children:"ans[i + n] == nums[i]"})," for ",(0,o.jsx)(e.code,{children:"0 <= i < n"})," (",(0,o.jsx)(e.strong,{children:"0-indexed"}),")."]}),"\n",(0,o.jsxs)(e.p,{children:["Specifically, ",(0,o.jsx)(e.code,{children:"ans"})," is the ",(0,o.jsx)(e.strong,{children:"concatenation"})," of two ",(0,o.jsx)(e.code,{children:"nums"})," arrays."]}),"\n",(0,o.jsxs)(e.p,{children:["Return ",(0,o.jsx)(e.em,{children:"the array"})," ",(0,o.jsx)(e.code,{children:"ans"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: nums = [1,2,1]\nOutput: [1,2,1,1,2,1]\nExplanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: nums = [1,3,2,1]\nOutput: [1,3,2,1,1,3,2,1]\nExplanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"n == nums.length"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"1 <= n <= 1000"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.code,{children:"1 <= nums[i] <= 1000"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"approach-1-iteration",children:"Approach 1: Iteration"}),"\n",(0,o.jsxs)(e.p,{children:["We need to look at ",(0,o.jsx)(e.code,{children:"nums"})," two times to create the desired result. The simplest approach is to perform two for-loops in ",(0,o.jsx)(e.code,{children:"nums"})," and copy the numbers to ",(0,o.jsx)(e.code,{children:"result"})," ."]}),"\n",(0,o.jsx)(t,{name:"@heiheihang"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"def getConcatenation(self, nums: List[int]) -> List[int]:\n        \n        #initialize result\n        result = []\n        \n        #first iteration of nums\n        for i in range(len(nums)):\n            result.append(nums[i])\n        \n        #second iteration of nums\n        for i in range(len(nums)):\n            result.append(nums[i])\n        \n        #return result\n        return result\n"})})]})}function h(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>i});var o=t(67294);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);