"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[49658],{29399:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var i=n(85893),o=n(11151);const l={description:"Author: @wingkwong | https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",tags:["Array","Two Pointers","Binary Search","Sorting"]},t="2300 - Successful Pairs of Spells and Potions (Medium)",r={id:"2300-2399/successful-pairs-of-spells-and-potions-medium",title:"2300 - Successful Pairs of Spells and Potions (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",source:"@site/solutions/2300-2399/2300-successful-pairs-of-spells-and-potions-medium.md",sourceDirName:"2300-2399",slug:"/2300-2399/successful-pairs-of-spells-and-potions-medium",permalink:"/solutions/2300-2399/successful-pairs-of-spells-and-potions-medium",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2300-successful-pairs-of-spells-and-potions-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"},{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:2300,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",tags:["Array","Two Pointers","Binary Search","Sorting"]},sidebar:"tutorialSidebar",previous:{title:"2300 - 2399",permalink:"/solutions/category/2300---2399"},next:{title:"2302 - Count Subarrays With Score Less Than K (Hard)",permalink:"/solutions/2300-2399/count-subarrays-with-score-less-than-k"}},c={},a=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}];function p(s){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...s.components},{SolutionAuthor:n,TabItem:l,Tabs:t}=e;return n||u("SolutionAuthor",!0),l||u("TabItem",!0),t||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"2300---successful-pairs-of-spells-and-potions-medium",children:"2300 - Successful Pairs of Spells and Potions (Medium)"}),"\n",(0,i.jsx)(e.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",children:"https://leetcode.com/problems/successful-pairs-of-spells-and-potions/"})}),"\n",(0,i.jsx)(e.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(e.p,{children:["You are given two positive integer arrays ",(0,i.jsx)(e.code,{children:"spells"})," and ",(0,i.jsx)(e.code,{children:"potions"}),", of length ",(0,i.jsx)(e.code,{children:"n"})," and ",(0,i.jsx)(e.code,{children:"m"})," respectively, where ",(0,i.jsx)(e.code,{children:"spells[i]"})," represents the strength of the ",(0,i.jsx)(e.code,{children:"ith"})," spell and ",(0,i.jsx)(e.code,{children:"potions[j]"})," represents the strength of the ",(0,i.jsx)(e.code,{children:"jth"})," potion."]}),"\n",(0,i.jsxs)(e.p,{children:["You are also given an integer ",(0,i.jsx)(e.code,{children:"success"}),". A spell and potion pair is considered ",(0,i.jsx)(e.strong,{children:"successful"})," if the ",(0,i.jsx)(e.strong,{children:"product"})," of their strengths is ",(0,i.jsx)(e.strong,{children:"at least"})," ",(0,i.jsx)(e.code,{children:"success"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["Return ",(0,i.jsx)(e.em,{children:"an integer array"}),(0,i.jsx)(e.code,{children:"pairs"}),(0,i.jsx)(e.em,{children:"of length"}),(0,i.jsx)(e.code,{children:"n"}),(0,i.jsx)(e.em,{children:"where"}),(0,i.jsx)(e.code,{children:"pairs[i]"}),(0,i.jsxs)(e.em,{children:["is the number of ",(0,i.jsx)(e.strong,{children:"potions"})," that will form a successful pair with the"]}),(0,i.jsx)(e.code,{children:"ith"}),(0,i.jsx)(e.em,{children:"spell."})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7\nOutput: [4,0,3]\nExplanation:\n- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.\n- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Input: spells = [3,1,2], potions = [8,5,8], success = 16\nOutput: [2,0,2]\nExplanation:\n- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.\n- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"n == spells.length"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"m == potions.length"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"1 <= n, m <= 105"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"1 <= spells[i], potions[i] <= 105"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"1 <= success <= 1010"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"approach-1-binary-search",children:"Approach 1: Binary Search"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)(l,{value:"cpp",label:"C++",children:[(0,i.jsx)(n,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {\n        vector<int> ans;\n        // sort the potions since we need to binary search on it\n        sort(potions.begin(), potions.end());\n        for (auto spell : spells) {\n            // we need to binary search the first position closest to `minPotion`\n            // which is the value to fulfil the requirment\n            // spells[i] * minPotion >= success\n            // minPotion = ceil(success / spells[i])\n            // ceil(success / spells[i]) can be written as (success + spell - 1) // spell\n            // since potions after `minPotion` will be valid as well\n            // the answer is simply m - index from the binary search\n            ans.push_back(\n                potions.end() - \n                lower_bound(potions.begin(), potions.end(), (spell + success - 1) / spell)\n            );\n        }\n        return ans;\n    }\n};\n"})})]}),(0,i.jsxs)(l,{value:"py",label:"Python",children:[(0,i.jsx)(n,{name:"@wingkwong"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-py",children:"class Solution:\n    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:\n        m = len(potions)\n        res = []\n        potions.sort()\n        for spell in spells:\n            mi = (success + spell - 1) // spell\n            res.append(m - bisect_left(potions, mi))\n        return res\n"})})]})]})]})}function d(s={}){const{wrapper:e}={...(0,o.a)(),...s.components};return e?(0,i.jsx)(e,{...s,children:(0,i.jsx)(p,{...s})}):p(s)}function u(s,e){throw new Error("Expected "+(e?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(s,e,n)=>{n.d(e,{Z:()=>r,a:()=>t});var i=n(67294);const o={},l=i.createContext(o);function t(s){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function r(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(o):s.components||o:t(s.components),i.createElement(l.Provider,{value:e},s.children)}}}]);